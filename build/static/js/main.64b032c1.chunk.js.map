{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","process","contractABI","abi","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","console","log","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","waveTxn","hash","wait","useEffect","onNewWave","from","prevState","on","off","className","onClick","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64b032c1.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport abi from \"./utils/WavePortal.json\"\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n    const [allWaves, setAllWaves] = useState([]);\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n    const contractABI = abi.abi\n\n  const getAllWaves = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(\n\t\t\t\t\tcontractAddress,\n\t\t\t\t\tcontractABI,\n\t\t\t\t\tsigner,\n\t\t\t\t);\n\n\t\t\t\t/*\n\t\t\t\t * Call the getAllWaves method from your Smart Contract\n\t\t\t\t */\n\t\t\t\tconst waves = await wavePortalContract.getAllWaves();\n\n\t\t\t\tconst wavesCleaned = waves.map(wave => {\n                  return {\n                    address: wave.waver,\n                    timestamp: new Date(wave.timestamp * 1000),\n                    message: wave.message\n                  }\n                });\n\t\t\t\t\n\t\t\t\tsetAllWaves(wavesCleaned);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t\t}\n            getAllWaves();\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\t\tsetCurrentAccount(account);\n                \n\t\t\t} else {\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t/**\n\t * Implement your connectWallet method here\n\t */\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get MetaMask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n    const wave = async () => {\n      try{\n        const {ethereum} = window;\n        \n        if(ethereum){\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const wavePortalContract = new ethers.Contract(contractAddress, contractABI ,signer)\n       \n           let count = await wavePortalContract.getTotalWaves()\n           console.log(\"Total count: \", count.toNumber())\n\n                   const waveTxn = await wavePortalContract.wave(\"this is a message\");\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        } else {\n          console.log(\"Fail\")\n        }\n      } catch {\n      \n      }\n    }\n\nuseEffect(() => {\n\tlet wavePortalContract;\n\n\tconst onNewWave = (from, timestamp, message) => {\n\t\tconsole.log(\"NewWave\", from, timestamp, message);\n\t\tsetAllWaves((prevState) => [\n\t\t\t...prevState,\n\t\t\t{\n\t\t\t\taddress: from,\n\t\t\t\ttimestamp: new Date(timestamp * 1000),\n\t\t\t\tmessage: message,\n\t\t\t},\n\t\t]);\n\t};\n\n\tif (window.ethereum) {\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\tconst signer = provider.getSigner();\n\n\t\twavePortalContract = new ethers.Contract(\n\t\t\tcontractAddress,\n\t\t\tcontractABI,\n\t\t\tsigner,\n\t\t);\n\t\twavePortalContract.on(\"NewWave\", onNewWave);\n\t}\n\n\treturn () => {\n\t\tif (wavePortalContract) {\n\t\t\twavePortalContract.off(\"NewWave\", onNewWave);\n\t\t}\n\t};\n}, []);\n    \n\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"mainContainer\">\n\t\t\t<div className=\"dataContainer\">\n\t\t\t\t<div className=\"header\"> Hey there!</div>\n\n\t\t\t\t<div className=\"bio\">\n\t\t\t\t\tI am Jhonaiker and i'm trying to become a blockchain developer'\n\t\t\t\t</div>\n\n\t\t\t\t<button className=\"waveButton\" onClick={wave}>\n\t\t\t\t\tWave at Me\n\t\t\t\t</button>\n\n\t\t\t\t{/*\n\t\t\t\t * If there is no currentAccount render this button\n\t\t\t\t */}\n\t\t\t\t{!currentAccount && (\n\t\t\t\t\t<button className=\"waveButton\" onClick={connectWallet}>\n\t\t\t\t\t\tConnect Wallet\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t{allWaves.map((wave, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundColor: \"OldLace\",\n\t\t\t\t\t\t\t\tmarginTop: \"16px\",\n\t\t\t\t\t\t\t\tpadding: \"8px\",\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<div>Address: {wave.address}</div>\n\t\t\t\t\t\t\t<div>Time: {wave.timestamp.toString()}</div>\n\t\t\t\t\t\t\t<div>Message: {wave.message}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}